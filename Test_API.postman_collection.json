{
	"info": {
		"_postman_id": "e17b8444-b1da-461d-83a2-aba0afcebc3c",
		"name": "Test_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Data",
			"item": [
				{
					"name": "Conductive Release Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Debug Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Auto Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/auto",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"auto"
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed"
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed note Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/note",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"note"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/SmartAnt",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"SmartAnt"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/Normal",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"Normal"
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise"
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise note Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/note",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"note"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Conductive Debug modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('module', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/modules",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug search module",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('module', '_____');\r",
									"      postman.setEnvironmentVariable('project', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/projects",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug search project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin",
			"item": []
		}
	]
}