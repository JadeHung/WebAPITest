{
	"info": {
		"_postman_id": "e17b8444-b1da-461d-83a2-aba0afcebc3c",
		"name": "Test_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Conductive",
			"item": [
				{
					"name": "Conductive Debug Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    if (data.projects.length > 0) {\r",
									"      postman.setEnvironmentVariable('projectid', data.projects[0].Id);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects?page=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"dataViewModel\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"},\r",
									"    \"modetopage\": {\"type\": \"array\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"dataViewModel\", \"pagination\", \"modetopage\"]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/data/{{projectid}}?mode=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"data",
								"{{projectid}}"
							],
							"query": [
								{
									"key": "mode",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug Chart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"dataViewModel\": {\"type\": \"object\"},\r",
									"    \"pagination\": {\"type\": \"object\"},\r",
									"    \"modetopage\": {\"type\": \"array\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"dataViewModel\", \"pagination\", \"modetopage\"]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('projectid', -1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/chart/{{projectid}}?mode=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"chart",
								"{{projectid}}"
							],
							"query": [
								{
									"key": "mode",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug IxChariot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"ID\": {\"type\": \"number\"},\r",
									"    \"ProjectID\": {\"type\": \"number\"},\r",
									"    \"TestItem\": {\"type\": \"string\"},\r",
									"    \"Time\": {\"type\": \"array\"},\r",
									"    \"Points\": {\"type\": \"array\"}\r",
									"  },\r",
									"  \"required\": [\"ID\", \"ProjectID\", \"TestItem\", \"Time\", \"Points\"]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/ixchariot/{{ixchariotid}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"ixchariot",
								"{{ixchariotid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('module', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/modules",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug search module",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('module', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug projectlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('project', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/projects",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug search project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('project', '_____');\r",
									"    postman.setEnvironmentVariable('starttime', '2019-11-13');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug search starttime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('starttime', '_____');\r",
									"    postman.setEnvironmentVariable('stoptime', '2019-11-13');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug search stoptime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('stoptime', '_____');\r",
									"    postman.setEnvironmentVariable('keyword', 'MT7663');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Debug search keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('keyword', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Release Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    if (data.projects.length > 0) {\r",
									"      postman.setEnvironmentVariable('projectid', data.projects[0].Id);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin?page=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Release Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"dataViewModel\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"},\r",
									"    \"modetopage\": {\"type\": \"array\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"dataViewModel\", \"pagination\", \"modetopage\"]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin/data/{{projectid}}?mode=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin",
								"data",
								"{{projectid}}"
							],
							"query": [
								{
									"key": "mode",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Release Chart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"dataViewModel\": {\"type\": \"object\"},\r",
									"    \"pagination\": {\"type\": \"object\"},\r",
									"    \"modetopage\": {\"type\": \"array\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"dataViewModel\", \"pagination\", \"modetopage\"]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('projectid', -1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin/chart/{{projectid}}?mode=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin",
								"chart",
								"{{projectid}}"
							],
							"query": [
								{
									"key": "mode",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Release modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('module', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin/modules",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Release search module",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('module', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Release projectlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('project', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin/projects",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Release search project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('project', '_____');\r",
									"    postman.setEnvironmentVariable('starttime', '2021-07-19');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Release search time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('starttime', '_____');\r",
									"    postman.setEnvironmentVariable('keyword', 'Debug');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive Release search keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('keyword', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OTA",
			"item": [
				{
					"name": "Ota Debug Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    if (data.projects.length > 0) {\r",
									"      postman.setEnvironmentVariable('projectid', data.projects[0].Id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota?page=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"dataViewModel\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"},\r",
									"    \"modetopage\": {\"type\": \"array\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"dataViewModel\", \"pagination\", \"modetopage\"]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('projectid', -1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/data/{{projectid}}?mode=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"data",
								"{{projectid}}"
							],
							"query": [
								{
									"key": "mode",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota projectlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('project', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/projects",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota search project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('project', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}&chamber={{chamber}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "chamber",
									"value": "{{chamber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('module', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/modules",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota search module",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('module', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}&chamber={{chamber}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "chamber",
									"value": "{{chamber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota chambers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"number\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('chamber', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/chamber",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"chamber"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota search chamber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('chamber', -1);\r",
									"    postman.setEnvironmentVariable('keyword', 'Test');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}&chamber={{chamber}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "chamber",
									"value": "{{chamber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota search keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('keyword', '_____');\r",
									"    postman.setEnvironmentVariable('starttime', '2020-12-01');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}&chamber={{chamber}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "chamber",
									"value": "{{chamber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota search starttime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('starttime', '_____');\r",
									"    postman.setEnvironmentVariable('stoptime', '2020-12-03');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}&chamber={{chamber}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "chamber",
									"value": "{{chamber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota search stoptime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('stoptime', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}&chamber={{chamber}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "chamber",
									"value": "{{chamber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Auto Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    if (data.projects.length > 0) {\r",
									"      postman.setEnvironmentVariable('projectid', data.projects[0].Id);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/auto?page=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"auto"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Auto Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"dataViewModel\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"},\r",
									"    \"modetopage\": {\"type\": \"array\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"dataViewModel\", \"pagination\", \"modetopage\"]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('projectid', -1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/auto/data/{{projectid}}?mode=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"auto",
								"data",
								"{{projectid}}"
							],
							"query": [
								{
									"key": "mode",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Auto projectlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('project', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/auto/projects",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"auto",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Auto search project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('project', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/auto/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}&chamber={{chamber}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"auto",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "chamber",
									"value": "{{chamber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Auto modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('module', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/auto/modules",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"auto",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Auto search module",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('module', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/auto/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}&chamber={{chamber}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"auto",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "chamber",
									"value": "{{chamber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Auto chambers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"number\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('chamber', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/auto/chamber",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"auto",
								"chamber"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Auto search chamber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('chamber', -1);\r",
									"    postman.setEnvironmentVariable('keyword', 'Test');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/auto/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}&chamber={{chamber}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"auto",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "chamber",
									"value": "{{chamber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Auto search keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('keyword', '_____');\r",
									"    postman.setEnvironmentVariable('starttime', '2021-05-07');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/auto/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}&chamber={{chamber}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"auto",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "chamber",
									"value": "{{chamber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Auto search starttime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('starttime', '_____');\r",
									"    postman.setEnvironmentVariable('stoptime', '2021-05-10');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/auto/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}&chamber={{chamber}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"auto",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "chamber",
									"value": "{{chamber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ota Auto search stoptime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('stoptime', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Ota/auto/searchFilter?module={{module}}&project={{project}}&starttime={{starttime}}&stoptime={{stoptime}}&keyword={{keyword}}&chamber={{chamber}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Ota",
								"auto",
								"searchFilter"
							],
							"query": [
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "chamber",
									"value": "{{chamber}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Conductive admin Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    if (data.projects.length > 0) {\r",
									"      postman.setEnvironmentVariable('projectid', data.projects[0].Id);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin?page=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive admin Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"dataViewModel\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"},\r",
									"    \"modetopage\": {\"type\": \"array\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"dataViewModel\", \"pagination\", \"modetopage\"]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin/data/{{projectid}}?mode=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin",
								"data",
								"{{projectid}}"
							],
							"query": [
								{
									"key": "mode",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive admin update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"ModuleName\":\"DebugModule6666\",\"Scenario\":\"Normal\",\"ProjectName\":\"DebugProject666\",\"Driver\":\"66\",\"Note\":\"test6\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin/update/{{projectid}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin",
								"update",
								"{{projectid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive admin delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"ProjectId\":131,\"DataIdList\":[73776,73777]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin/delete",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive admin create Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"ModuleName\":\"New\",\"Scenario\":\"Normal\",\"ProjectName\":\"New\",\"Driver\":\"\",\"Note\":\"\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive admin insert Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"ProjectId\":137,\"DataIdList\":[237883,237884,237885,237886,237887,237888,237889,237890,237891,237892,237893,237894,237895,237896,237897,237898,237899,237900,237901,237902,237903,237904,237905,237906,237907,237908,237909,237910,237911,237912,237913,237914,237915,237916,237917,237918,237919,237920,237921,237922,237923,237924,237925,237926,237927,237928,237929,237930,237931,237932,237933,237934,237935,237936,237937,237938,237939,237940,237941,237942,237943,237944,237945,237946,237947,237948,237949,237950,237951,237952,237953,237954,237955,237956,237957,237958,237959,237960,237961,237962,237963,237964,237965,237966,237967,237968,237969,237970,237971,237972,237973,237974]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin/data",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin",
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Conductive admin check TRx",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Projects/admin/trx/{{projectid}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Projects",
								"admin",
								"trx",
								"{{projectid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HighSpeed",
			"item": [
				{
					"name": "HighSpeed Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    if (data.projects.length > 0) {\r",
									"        postman.setEnvironmentVariable('projectid', data.projects[0].Id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed?page=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"object\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('projectid', -1);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/data/{{projectid}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"data",
								"{{projectid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed projectlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('project', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/project",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed search stage Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('project', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed stages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('stage', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/stage",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"stage"
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed search stage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('stage', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('module', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/module",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"module"
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed search module",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('module', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed specs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('spec', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/spec",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"spec"
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed search spec",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('spec', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed modes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('mode', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/mode",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"mode"
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed search mode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('mode', '_____');\r",
									"    postman.setEnvironmentVariable('sku', 'sku1');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed search sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('sku', '_____');\r",
									"    postman.setEnvironmentVariable('keyword', 'UX');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed search keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('keyword', '_____');\r",
									"    postman.setEnvironmentVariable('starttime', '2020-05-13');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed search starttime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('starttime', '_____');\r",
									"    postman.setEnvironmentVariable('stoptime', '2020-05-28');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed search stoptime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('stoptime', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed note Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('keyword', 'FullTest');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/note?page=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"note"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed note search keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('keyword', '_____');\r",
									"    postman.setEnvironmentVariable('starttime', '2020-04-29');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/note/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"note",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed note search starttime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('starttime', '_____');\r",
									"    postman.setEnvironmentVariable('stoptime', '2020-05-28');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/note/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"note",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HighSpeed note search stoptime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('stoptime', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/HighSpeed/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"HighSpeed",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PlatformNoise",
			"item": [
				{
					"name": "PlatformNoise Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    if (data.projects.length > 0) {\r",
									"        postman.setEnvironmentVariable('projectid', data.projects[0].Id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise?page=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"object\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('projectid', -1);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/data/{{projectid}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"data",
								"{{projectid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise projectlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('project', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/project",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise search project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('project', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise stages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('stage', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/stage",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"stage"
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise search stage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('stage', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('module', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/module",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"module"
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise search module",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('module', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise specs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('spec', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/spec",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"spec"
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise search spec",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('spec', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise modes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('mode', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/mode",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"mode"
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise search mode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('mode', '_____');\r",
									"    postman.setEnvironmentVariable('sku', 'sku1');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise search sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('sku', '_____');\r",
									"    postman.setEnvironmentVariable('keyword', 'UX');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise search keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('keyword', '_____');\r",
									"    postman.setEnvironmentVariable('starttime', '2020-10-13');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise search starttime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('starttime', '_____');\r",
									"    postman.setEnvironmentVariable('stoptime', '2020-10-14');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise search stoptime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('stoptime', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise note Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('keyword', 'TEST');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/note?page=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"note"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise note search keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('keyword', '_____');\r",
									"    postman.setEnvironmentVariable('starttime', '2020-11-24');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/note/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"note",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise note search starttime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('starttime', '_____');\r",
									"    postman.setEnvironmentVariable('stoptime', '2020-12-07');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/note/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"note",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PlatformNoise note search stoptime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('stoptime', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/PlatformNoise/note/searchFilter?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"PlatformNoise",
								"note",
								"searchFilter"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ThreeD",
			"item": [
				{
					"name": "ThreeD SmartAnt Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    if (data.projects.length > 0) {\r",
									"        postman.setEnvironmentVariable('projectid', data.projects[0].Id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/SmartAnt?page=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"SmartAnt"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"object\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('mode', data[0].AccessPoint + '_' + data[0].TRx + '_' + data[0].Frequency + '_' + data[0].Standard + '_' + data[0].BandWidth);\r",
									"      postman.setEnvironmentVariable('channel', data[0].Channel);\r",
									"      postman.setEnvironmentVariable('attenuator', data[0].Attenuator);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/data/{{projectid}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"data",
								"{{projectid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt Result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"object\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"    postman.setEnvironmentVariable('mode', '_____');\r",
									"    postman.setEnvironmentVariable('channel', '_____');\r",
									"    postman.setEnvironmentVariable('attenuator', -1);\r",
									"    postman.setEnvironmentVariable('projectid', data[0].children[0].GraphId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/result/SmartAnt?proid={{projectid}}&mode={{mode}}&channel={{channel}}&att={{attenuator}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"result",
								"SmartAnt"
							],
							"query": [
								{
									"key": "proid",
									"value": "{{projectid}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "channel",
									"value": "{{channel}}"
								},
								{
									"key": "att",
									"value": "{{attenuator}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt rawIxchariot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"object\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"    postman.setEnvironmentVariable('projectid', -1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/rawIxchariot?id={{projectid}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"rawIxchariot"
							],
							"query": [
								{
									"key": "id",
									"value": "{{projectid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('module', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/SmartAnt/module",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"SmartAnt",
								"module"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt search module",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('module', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterSmartAnt?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterSmartAnt"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt projectlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('project', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/SmartAnt/project",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"SmartAnt",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt search project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('project', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterSmartAnt?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterSmartAnt"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt stages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('stage', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/SmartAnt/stage",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"SmartAnt",
								"stage"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt search stage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('stage', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterSmartAnt?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterSmartAnt"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt specs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('spec', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/SmartAnt/spec",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"SmartAnt",
								"spec"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt search spec",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('spec', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterSmartAnt?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterSmartAnt"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt modes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('mode', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/SmartAnt/mode",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"SmartAnt",
								"mode"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt search mode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('mode', '_____');\r",
									"    postman.setEnvironmentVariable('sku', 'sku');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterSmartAnt?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterSmartAnt"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt search sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('sku', '_____');\r",
									"    postman.setEnvironmentVariable('keyword', 'Test');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterSmartAnt?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterSmartAnt"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt search keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('keyword', '_____');\r",
									"    postman.setEnvironmentVariable('starttime', '2020-10-22');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterSmartAnt?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterSmartAnt"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt search starttime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('starttime', '_____');\r",
									"    postman.setEnvironmentVariable('stoptime', '2020-10-26');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterSmartAnt?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterSmartAnt"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD SmartAnt search stoptime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('stoptime', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterSmartAnt?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterSmartAnt"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    if (data.projects.length > 0) {\r",
									"        postman.setEnvironmentVariable('projectid', data.projects[0].Id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/Normal?page=1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"Normal"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"object\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('mode', data[0].AccessPoint + '_' + data[0].TRx + '_' + data[0].Frequency + '_' + data[0].Standard + '_' + data[0].BandWidth);\r",
									"      postman.setEnvironmentVariable('channel', data[0].Channel);\r",
									"      postman.setEnvironmentVariable('attenuator', data[0].Attenuator);\r",
									"      postman.setEnvironmentVariable('modecritical', data[0].AccessPoint + '_' + data[0].TRx + '_' + data[0].Frequency + '_' + data[0].Standard + '_' + data[0].BandWidth + '_' + data[0].Channel + '_' + data[0].Attenuator);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/data/{{projectid}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"data",
								"{{projectid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal Result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"object\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('mode', '_____');\r",
									"      postman.setEnvironmentVariable('channel', '_____');\r",
									"      postman.setEnvironmentVariable('attenuator', -1);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/result?proid={{projectid}}&mode={{mode}}&channel={{channel}}&att={{attenuator}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"result"
							],
							"query": [
								{
									"key": "proid",
									"value": "{{projectid}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "channel",
									"value": "{{channel}}"
								},
								{
									"key": "att",
									"value": "{{attenuator}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal Critical",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"object\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('projectid', -1);\r",
									"      postman.setEnvironmentVariable('modecritical', '_____');\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/criticalResult?proid={{projectid}}&testitem={{modecritical}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"criticalResult"
							],
							"query": [
								{
									"key": "proid",
									"value": "{{projectid}}"
								},
								{
									"key": "testitem",
									"value": "{{modecritical}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('module', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/Normal/module",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"Normal",
								"module"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal search module",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('module', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterNormal?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterNormal"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal projectlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('project', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/Normal/project",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"Normal",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal search project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('project', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterNormal?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterNormal"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal stages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('stage', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/Normal/stage",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"Normal",
								"stage"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal search stage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('stage', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterNormal?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterNormal"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal specs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('spec', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/Normal/spec",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"Normal",
								"spec"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal search spec",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('spec', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterNormal?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterNormal"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal modes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									" \"items\": {\r",
									" \"type\": \"string\"\r",
									" }\r",
									"};\r",
									"\r",
									"var data = JSON.parse(responseBody)\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"  if (data.length > 0) {\r",
									"      postman.setEnvironmentVariable('mode', data[0]);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/Normal/mode",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"Normal",
								"mode"
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal search mode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('mode', '_____');\r",
									"    postman.setEnvironmentVariable('sku', 'sku');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterNormal?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterNormal"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal search sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('sku', '_____');\r",
									"    postman.setEnvironmentVariable('keyword', 'Att');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterNormal?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterNormal"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal search keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('keyword', '_____');\r",
									"    postman.setEnvironmentVariable('starttime', '2020-10-22');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterNormal?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterNormal"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal search starttime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('starttime', '_____');\r",
									"    postman.setEnvironmentVariable('stoptime', '2020-10-23');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterNormal?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterNormal"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ThreeD Normal search stoptime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"message\": {\"type\": \"string\"},\r",
									"    \"projects\": {\"type\": \"array\"},\r",
									"    \"pagination\": {\"type\": \"object\"}\r",
									"  },\r",
									"  \"required\": [\"message\", \"projects\", \"pagination\"]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    postman.setEnvironmentVariable('stoptime', '_____');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/ThreeD/searchFilterNormal?project={{project}}&stage={{stage}}&module={{module}}&spec={{spec}}&mode={{mode}}&sku={{sku}}&keyword={{keyword}}&starttime={{starttime}}&stoptime={{stoptime}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"ThreeD",
								"searchFilterNormal"
							],
							"query": [
								{
									"key": "project",
									"value": "{{project}}"
								},
								{
									"key": "stage",
									"value": "{{stage}}"
								},
								{
									"key": "module",
									"value": "{{module}}"
								},
								{
									"key": "spec",
									"value": "{{spec}}"
								},
								{
									"key": "mode",
									"value": "{{mode}}"
								},
								{
									"key": "sku",
									"value": "{{sku}}"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}"
								},
								{
									"key": "starttime",
									"value": "{{starttime}}"
								},
								{
									"key": "stoptime",
									"value": "{{stoptime}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}